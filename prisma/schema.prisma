datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int        @id @default(autoincrement())
  username  String     @unique
  email     String     @unique
  password  String
  role      String     @default("user")
  borrows   Borrow[]
  favorites Favorite[]
  reviews   Review[]
}

model Book {
  id          Int           @id @default(autoincrement())
  title       String
  author      String
  description String
  borrows     Borrow[]
  favorites   Favorite[]
  reviews     Review[]
  categories  BookCategory[]
}

model Borrow {
  id          Int       @id @default(autoincrement())
  userId      Int
  bookId      Int
  borrowDate  DateTime  @default(now())
  dueDate     DateTime
  returnDate  DateTime?
  status      String    @default("dipinjam")
  fineAmount  Float?    // opsional, bisa 0 jika tidak ada denda
  extended    Boolean   @default(false)
  notes       String?
  handledBy   Int?      

  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])
}

model Category {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  description String?        
  books       BookCategory[]
}


model BookCategory {
  id         Int      @id @default(autoincrement())
  bookId     Int
  categoryId Int

  book     Book     @relation(fields: [bookId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@unique([bookId, categoryId])
}

model Favorite {
  id      Int  @id @default(autoincrement())
  userId  Int
  bookId  Int

  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])

  @@unique([userId, bookId])
}

model Review {
  id      Int      @id @default(autoincrement())
  userId  Int
  bookId  Int
  rating  Int
  comment String
  date    DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])
}